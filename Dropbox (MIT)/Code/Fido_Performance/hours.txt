12/23/15 - 1 hour  - Looked through code. Discussed code and project with Jonathan

12/25/15 - 3 hours - Setup project such that it could be run. 
                   - Looked through code and changed it so it could be run safely.
                   - Built logger that logged loans to csv file.
                   - Next step is to finalize logging implementation and build benchmark
                   - Want to test out JSON vs. CSV
                   - Look into overhead of multithreading for Java
                  
12/25/15 - 2 hours - Refactored code.
                   - Got timing results. CSV is about 30 percent faster for parsing.
                      - ~60 ms vs ~90 ms for JSON
                   - Tried speeding up requests by offloading URI creation to constructor

01/04/16 - 2 hours - Looked over LoanRetriever and LoanOrderer in detail
                   - Looked over logs to look at areas of improvement
                   - Designed new system to combine LoanRetriever and LoanOrdered to reduce order latency

01/06/16 - 2 hours - Researched Cirrix1 vs non-Cirix1 differences 
                   - Meeting with Jonathan
                   - TODO:
                        - Remove Consumer/Producer from Cirrix1
                        - Look for bug in Cirrix1 with wrong buy percentage
                        - Investigate JSON vs CSV networking timing differences
                        - Build custom JSON or CSV parser depending on which is faster
                        - Build Multiple Retriever / One Orderer type system
                            - Use Buffered Queue for one version
                            - Use vanilla array with synchronized flag for another
                       
01/07/16 - 2 hours - Discovered unused boolean showAll for getLoanAsString
                   - Do you ever want to buy partial/Can you buy partial of a non Cirrix1 loan?
                        - Should change setRequestAmounts to be more specialized
                        - It is in the hot zone and should be as fast as possible
                   - Is the bulk of buying just in one go?
                   - Might want to make LoanList more low level
                   - Made content timing script and sent results to Jonathan
                        - CSV winner.
                        - Now will move on to building low level parser for CSV

01/08/16 - 2 hours - Java vs Curl experiment
                       - Java code proved to be slightly faster over 50 trials
                       - Emailed results to Jonathan
                       - Looked over the code for optimizations
                       - Fixed a bug in my code that wasn't using the showall flag
                       - Also, found http://lmax-exchange.github.io/disruptor/
                            - Faster alternative to a Java Blocking Queue
                       - Interesting Java for low latency panel
                            - http://www.infoq.com/articles/low-latency-vp
                       - There might be bug in the original way loans are parsed
                            - Iteration loop starts with 1
                            - Need to check the number of loans we should be getting from the raw data

01/09/16 - 3 hours - Optimized CSV parser
                        - Reduced parsing time from 0.01439 to 0.00305 for a set of loans
                        - 78.8% speedup on this section of code

01/10/16 - 2 hours - Cirrix1MR allows for multiple retrievers
                        - Tested by running threads and only retrieving
                        - Got rid of buffered queue and using array and atomic boolean
                        - Should just put all ordering logic in a wrap of the atomic boolean
                          
01/10/16 - 8 hours - Jonathan Meeting
                   - Fixed test input CSV so it could be used with fast Loan Constructor
                   - Tested input CSV to see filter performance
                        - Filtering takes very little runtime. Only roughly 0.8% of runtime for Filtering to get 14 from 1328 loans
                        - Likely can not be sped up more and not an area of focus
                   - Sped up CSV parser more
                        - Likely all that can be speed up
                        - Original Java Parser - 126 ms
                        - First Version Custom Parser - 73.1 ms
                        - This version - 23.7 ms
                        - 81% speedup
                   - Where did loan input come from?
                   - Looks like a lot of request overhead with the current library in use
                   - ToDo
                        - Improve SetRequestOrder, FormatOrderRequest, and Place Order
                        - Try to improve request sending and receiving with different library or custom implementation
                        - Cleanup MR code
                        - Make available cash threadsafe
                   - Separated SetRequestOrder. Need to make sure this is changed for all codes.
                   - Optimized SetRequestOrder, FormatOrderRequest, and Place Order
                   - Cleaned up project
                        - Added Cirrix Class as base class for all Cirix subclasses
                        - Refactored all Cirrix Versions for similar printing and indentation
                        - Removed all dead code
                    - Cleanup MR code
                        - Should be ready for live testing
                    - Look to see if there is a lower latency request library
                        - It looks like Apache library is the best
                    - Emailed Jonathan regarding live testing

                     